use backscatter_rs::fitting::fitacf3::fitacf_v3::fit_rawacf_record;
use backscatter_rs::utils::hdw::HdwInfo;
use chrono::NaiveDateTime;
use dmap::formats::{DmapRecord, FitacfRecord, RawacfRecord};
use std::fs::{remove_file, File};
use std::iter::zip;

#[test]
fn test_fitacf3() {
    // Create fitacf file from rawacf file
    let file = File::open("tests/test_files/test.rawacf").expect("Test file not found");
    let rawacf = RawacfRecord::read_records(file).expect("Could not read records");
    let mut fitacf_records = vec![];

    let rec = &rawacf[0];
    let file_datetime = NaiveDateTime::parse_from_str(
        format!(
            "{:4}{:0>2}{:0>2} {:0>2}:{:0>2}:{:0>2}",
            rec.year, rec.month, rec.day, rec.hour, rec.minute, rec.second
        )
        .as_str(),
        "%Y%m%d %H:%M:%S",
    )
    .expect("Unable to interpret record timestamp");
    let hdw = HdwInfo::new(rec.station_id, file_datetime).expect("Unable to read utils file");

    for rec in rawacf {
        fitacf_records.push(fit_rawacf_record(&rec, &hdw).expect("Could not fit record"));
    }

    // Compare to fitacf file generated by RST
    let fitacf_file =
        File::open("tests/test_files/test.fitacf").expect("Could not open example fitacf file");
    let fitacf =
        FitacfRecord::read_records(fitacf_file).expect("Could not read test.fitacf records");
    for (read_rec, written_rec) in zip(fitacf_records.iter(), fitacf.iter()) {
        assert_eq!(read_rec, written_rec)
    }
    remove_file("tests/test_files/temp.fitacf").expect("Unable to delete file");
}
