use backscatter_rs::fitting::fitacf3::fitacf_v3::fit_rawacf_record;
use dmap::formats::{RawacfRecord, DmapRecord, FitacfRecord, to_file};
use std::fs::{File, remove_file};
use std::iter::zip;

#[test]
fn test_fitacf3() {
    // Create fitacf file from rawacf file
    let file =
        File::open("tests/test_files/test.rawacf").expect("Test file not found");
    let rawacf = RawacfRecord::read_records(file).expect("Could not read records");
    let mut fitacf_records = vec![];
    for rec in rawacf {
        fitacf_records.push(fit_rawacf_record(&rec).expect("Could not fit record"));
    }
    // to_file("tests/test_files/temp.fitacf", &fitacf_records).expect("Unable to write fitacf to file");
    // Compare to fitacf file generated by RST
    let fitacf_file = File::open("tests/test_files/test.fitacf").expect("Could not open example fitacf file");
    let fitacf = FitacfRecord::read_records(fitacf_file).expect("Could not read test.fitacf records");
    for (read_rec, written_rec) in zip(fitacf_records.iter(), fitacf.iter()) {
        assert_eq!(read_rec, written_rec)
    }
    remove_file("tests/test_files/temp.fitacf").expect("Unable to delete file");
}